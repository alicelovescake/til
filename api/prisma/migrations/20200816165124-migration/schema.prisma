datasource DS {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = env("BINARY_TARGET")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  location  Location?
  birthDate DateTime?
  username  String     @unique
  learnings Learning[]
  likes     Like[]
  comments  Comment[]
  issuer    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Location {
  id        Int      @id @default(autoincrement())
  city      String
  lat       Float
  long      Float
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Learning {
  id        Int       @id @default(autoincrement())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  tags      Tag[]     @relation(references: [id])
  likes     Like[]
  comments  Comment[]
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String
  learnings Learning[] @relation(references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Like {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  learningId Int
  learning   Learning @relation(fields: [learningId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Comment {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  body       String
  learningId Int
  learning   Learning @relation(fields: [learningId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}
